version: '3.3'
services:
  nginx:
    build:
      context: .
      dockerfile: .docker/nginx/Dockerfile.nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - .docker/certbot/www/:/var/www/certbot/:ro
      - .docker/certbot/conf/:/etc/nginx/ssl/:ro
      - nginx:/etc/nginx/http.d
    depends_on:
      - builder
      - php
      - postgres
      - supervisor
      - certbot
    networks:
      - api_network
  php:
    build:
      context: .
      dockerfile: .docker/Dockerfile.prod
    container_name: php
    env_file:
      - .env
    tty: true
    networks:
      - api_network
    volumes:
      - storage:/var/www/html/storage
    depends_on:
      - builder
      - postgres
  supervisor:
    build:
      context: .
      dockerfile: .docker/supervisor/Dockerfile.supervisor
    volumes:
      - storage:/var/www/html/storage
    networks:
      - api_network
    depends_on:
      - builder
    env_file:
      - .env
  postgres:
    image: postgres:13.3-alpine3.13
    restart: always
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    volumes:
      - dbData:/var/lib/postgresql/data
    networks:
      - api_network
  builder:
    build:
      context: .
      dockerfile: .docker/Dockerfile.builder
      args:
        APP_URL: ${APP_URL}
    image: builder
    container_name: builder
    networks:
      - api_network
  certbot:
    image: certbot/certbot
    volumes:
      - .docker/certbot/www/:/var/www/certbot/:rw
      - .docker/certbot/conf/:/etc/letsencrypt/:rw
      - nginx:/etc/nginx/http.d
# Docker Networks
networks:
  api_network:
    driver: bridge
# Volumes
volumes:
  dbData:
  storage:
  nginx: